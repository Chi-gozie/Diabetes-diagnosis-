# Importing python pakages

import numpy as np 
import pandas as pd 
import seaborn as sb
import matplotlib.pyplot as plt
%matplotlib inline

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
/kaggle/input/diabetes-dataset/diabetes.csv
Introduction
Diabetes is a disease in which there is abnormal high level of glucose in the body as a result of the body inability to respond to the natural insulin hormones in the body. This is a dataset originally gotten from the National Institute for Diabetes and Digestive and Kidney Disease. It comprises of female of 20 years and above. Several data were collected and the dataset have 9 columns with 768 rows/entries. The column comprises of data such as pregnancies; to express the number of pregnanacies, glucose; to express the glucose level in the blood, blood pressure; to express blood pressure measurement, skin thickness;to express the thickness of the skin, insulin;to express insulin level in blood, BMI; to express the body mass index, diabetespedigreefunction; to express diabetes percentage, age; to express the age, outcome; to express the final result, 1 means yes, while 0 means no.

Objectives
To diagnostically predict whether a patient has disbetes based on certain diagnostic measurement in the dataset.

Loading my dataset
diabetes=pd.read_csv('/kaggle/input/diabetes-dataset/diabetes.csv')
Data wrangling
diabetes.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 768 entries, 0 to 767
Data columns (total 9 columns):
 #   Column                    Non-Null Count  Dtype  
---  ------                    --------------  -----  
 0   Pregnancies               768 non-null    int64  
 1   Glucose                   768 non-null    int64  
 2   BloodPressure             768 non-null    int64  
 3   SkinThickness             768 non-null    int64  
 4   Insulin                   768 non-null    int64  
 5   BMI                       768 non-null    float64
 6   DiabetesPedigreeFunction  768 non-null    float64
 7   Age                       768 non-null    int64  
 8   Outcome                   768 non-null    int64  
dtypes: float64(2), int64(7)
memory usage: 54.1 KB
diabetes.describe()
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
count	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000
mean	3.845052	120.894531	69.105469	20.536458	79.799479	31.992578	0.471876	33.240885	0.348958
std	3.369578	31.972618	19.355807	15.952218	115.244002	7.884160	0.331329	11.760232	0.476951
min	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.078000	21.000000	0.000000
25%	1.000000	99.000000	62.000000	0.000000	0.000000	27.300000	0.243750	24.000000	0.000000
50%	3.000000	117.000000	72.000000	23.000000	30.500000	32.000000	0.372500	29.000000	0.000000
75%	6.000000	140.250000	80.000000	32.000000	127.250000	36.600000	0.626250	41.000000	1.000000
max	17.000000	199.000000	122.000000	99.000000	846.000000	67.100000	2.420000	81.000000	1.000000
diabetes.head(10)
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
0	6	148	72	35	0	33.6	0.627	50	1
1	1	85	66	29	0	26.6	0.351	31	0
2	8	183	64	0	0	23.3	0.672	32	1
3	1	89	66	23	94	28.1	0.167	21	0
4	0	137	40	35	168	43.1	2.288	33	1
5	5	116	74	0	0	25.6	0.201	30	0
6	3	78	50	32	88	31.0	0.248	26	1
7	10	115	0	0	0	35.3	0.134	29	0
8	2	197	70	45	543	30.5	0.158	53	1
9	8	125	96	0	0	0.0	0.232	54	1
diabetes.Pregnancies.unique()
array([ 6,  1,  8,  0,  5,  3, 10,  2,  4,  7,  9, 11, 13, 15, 17, 12, 14])
diabetes.Age.nunique()
52
diabetes.isnull().sum()
Pregnancies                 0
Glucose                     0
BloodPressure               0
SkinThickness               0
Insulin                     0
BMI                         0
DiabetesPedigreeFunction    0
Age                         0
Outcome                     0
dtype: int64
diabetes.Outcome=diabetes.Outcome.astype('category')
diabetes.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 768 entries, 0 to 767
Data columns (total 9 columns):
 #   Column                    Non-Null Count  Dtype   
---  ------                    --------------  -----   
 0   Pregnancies               768 non-null    int64   
 1   Glucose                   768 non-null    int64   
 2   BloodPressure             768 non-null    int64   
 3   SkinThickness             768 non-null    int64   
 4   Insulin                   768 non-null    int64   
 5   BMI                       768 non-null    float64 
 6   DiabetesPedigreeFunction  768 non-null    float64 
 7   Age                       768 non-null    int64   
 8   Outcome                   768 non-null    category
dtypes: category(1), float64(2), int64(6)
memory usage: 49.0 KB
Removing all rows were certain columns data are zero

diabetes=diabetes[diabetes.BloodPressure !=0]
diabetes=diabetes[diabetes.Glucose !=0]
diabetes=diabetes[diabetes.SkinThickness !=0]
diabetes=diabetes[diabetes.Insulin !=0]
diabetes=diabetes[diabetes.BMI !=0]
diabetes=diabetes[diabetes.Age !=0]
diabetes=diabetes[diabetes.DiabetesPedigreeFunction !=0]
diabetes
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
3	1	89	66	23	94	28.1	0.167	21	0
4	0	137	40	35	168	43.1	2.288	33	1
6	3	78	50	32	88	31.0	0.248	26	1
8	2	197	70	45	543	30.5	0.158	53	1
13	1	189	60	23	846	30.1	0.398	59	1
...	...	...	...	...	...	...	...	...	...
753	0	181	88	44	510	43.3	0.222	26	1
755	1	128	88	39	110	36.5	1.057	37	1
760	2	88	58	26	16	28.4	0.766	22	0
763	10	101	76	48	180	32.9	0.171	63	0
765	5	121	72	23	112	26.2	0.245	30	0
392 rows Ã— 9 columns

All the data types are in their right type and there are no null value in the dataset.

Exploratory analysis
c=diabetes.Outcome.value_counts()
c
0    262
1    130
Name: Outcome, dtype: int64
base_color=sb.color_palette()[0]
sb.countplot(data=diabetes, x='Outcome', color=base_color)
plt.title('Total females who did not or have diabetes ')
Text(0.5, 1.0, 'Total females who did not or have diabetes ')

The chart and table above shows that 262 females not having diabetes, while 130 females had diabetes. The big question now what diagnostic measures contributed to some being diagnosed and others not diagnosed of diabetes. Well, we will find out below using correlations.

a=diabetes.groupby('Outcome').get_group(0)
a.describe()
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age
count	262.000000	262.000000	262.000000	262.000000	262.000000	262.000000	262.000000	262.000000
mean	2.721374	111.431298	68.969466	27.251908	130.854962	31.750763	0.472168	28.347328
std	2.617844	24.642133	11.892841	10.434135	102.626177	6.794971	0.299240	8.989008
min	0.000000	56.000000	24.000000	7.000000	15.000000	18.200000	0.085000	21.000000
25%	1.000000	94.000000	60.000000	18.250000	66.000000	26.125000	0.261000	22.000000
50%	2.000000	107.500000	70.000000	27.000000	105.000000	31.250000	0.413500	25.000000
75%	4.000000	126.000000	76.000000	34.000000	163.750000	36.100000	0.624250	30.000000
max	13.000000	197.000000	106.000000	60.000000	744.000000	57.300000	2.329000	81.000000
b=diabetes.groupby('Outcome').get_group(1)
b.describe()
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age
count	130.000000	130.000000	130.000000	130.000000	130.000000	130.000000	130.000000	130.000000
mean	4.469231	145.192308	74.076923	32.961538	206.846154	35.777692	0.625585	35.938462
std	3.916153	29.839388	13.021518	9.642770	132.699898	6.734687	0.405910	10.634705
min	0.000000	78.000000	30.000000	7.000000	14.000000	22.900000	0.127000	21.000000
25%	1.000000	124.250000	66.500000	26.000000	127.500000	31.600000	0.329750	27.250000
50%	3.000000	144.500000	74.000000	33.000000	169.500000	34.600000	0.546000	33.000000
75%	7.000000	171.750000	82.000000	39.750000	239.250000	38.350000	0.786500	43.000000
max	17.000000	198.000000	110.000000	63.000000	846.000000	67.100000	2.420000	60.000000
x=sb.violinplot(data=diabetes, x='Outcome', y='Age', color=base_color)
plt.title('Relationship between age and outcome of diabetes')
x
<AxesSubplot:title={'center':'Relationship between age and outcome of diabetes'}, xlabel='Outcome', ylabel='Age'>

The plot shows that older females are more prone to develop diabetes unlike the younger ones below the age of 25 years.

diabetes['Outcome']=diabetes.Outcome.replace({0: 'no', 1: 'yes'})
plt.figure(figsize=[20,5])
plt.subplot(1, 3, 1)
sb.violinplot(data=diabetes, x='Outcome', y='Glucose', color=base_color)

plt.subplot(1, 3, 2)
sb.violinplot(data=diabetes, x='Outcome', y='DiabetesPedigreeFunction', color=base_color)

plt.subplot(1, 3, 3)
sb.violinplot(data=diabetes, x='Outcome', y='Insulin', color=base_color)
<AxesSubplot:xlabel='Outcome', ylabel='Insulin'>

sb.catplot(data=diabetes, x='Insulin', y='Glucose', hue='Pregnancies', row='Outcome' )
<seaborn.axisgrid.FacetGrid at 0x7fb90851ee10>

diabetes['Outcome']=diabetes.Outcome.replace({0: 'no', 1:'yes'})
sb.FacetGrid(data=diabetes, col='Outcome').map(sb.regplot, 'BMI', 'BloodPressure').add_legend()
plt.show()

sb.FacetGrid(data=diabetes, col='Outcome').map(sb.regplot, 'Insulin', 'Glucose').add_legend()
<seaborn.axisgrid.FacetGrid at 0x7fb9080ea050>

sb.FacetGrid(data=diabetes, col='Outcome').map(sb.regplot, 'SkinThickness', 'DiabetesPedigreeFunction').add_legend()
<seaborn.axisgrid.FacetGrid at 0x7fb9082c8910>

plt.savefig('plt.png')
<Figure size 432x288 with 0 Axes>
Observation
The plots shows that glucose level in the blood determines the whether a patient has diabetes or not. Also, age, insulin, diabetespedegreefunction and BMI has a little influence whether a patient will be diagnosed of diabetes or not, while the other parameters shows no relationship with the diagnosis of diabetes in a patient.

Conclusion
Diagnosis of diabetes based on various diagnostic measurement depicts that elderly patients are more likely to be diagnosed of diabetes than the younger ones and obesed patients are at risk of being diagnosed of diabetes than those that their BMI are within healthy range.
